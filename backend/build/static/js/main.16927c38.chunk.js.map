{"version":3,"sources":["components/Charts/LineChartComponent.js","containers/ChartContainer.js","colors.js","components/Recap/RecapComponent.js","containers/RecapContainer.js","components/Charts/PolarAreaChartComponent.js","components/Charts/HorizontalBarChartComponent.js","components/List/ListComponent.js","containers/ListContainer.js","components/Charts/BarChartComponent.js","views/Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["LineChartComponent","props","chartRef","createRef","id","ref","this","labels","data","label","color","myChartRef","current","getContext","myChart","Chart","type","datasets","pointHoverBorderWidth","pointRadius","pointBorderWidth","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","options","responsive","maintainAspectRatio","aspectRatio","elements","line","tension","legend","display","scales","xAxes","pan","enabled","mode","zoom","graphHeight","canvas","height","gradientLine","createLinearGradient","rgb","substring","color1","map","c","parseInt","join","color2","addColorStop","backgroundColor","resetZoom","update","Component","ChartContainer","state","title","chartData","chartLabels","url","chartLabelsName","chartDataName","fetch","then","res","json","parsedData","JSON","parse","setState","component","RecapComponent","nbSongs","nbMinutes","avgMinutes","Row","mb","Col","Card","className","Body","RecapContainer","period","tracks_listened","min_listened","avg_min_listened","fetchData","PolarAreaChartComponent","borderWidth","hoverBorderColor","hoverBorderWidth","tooltips","hover","animationDuration","scale","gridLines","ticks","min","max","animation","duration","onComplete","chartInstance","chart","font","textAlign","textBaseline","fillStyle","maxRadius","controller","getDatasetMeta","forEach","bar","parseFloat","_model","outerRadius","myangl","startAngle","endAngle","xpoint","Math","cos","x","ypoint","sin","y","fillText","graphWidth","width","gradientRadial","createRadialGradient","hoverBackgroundColor","background_data","Array","length","fill","ListComponent","listData","listLabels","col1Label","col2Label","console","log","Container","xs","class","item","i","key","ListContainer","BarChartComponent","fontColor","yAxes","Dashboard","periodText","unit","selectedArtist","artistsList","recapContainerElement","React","dailyListeningGraph","topArtistList","artistListeningGraph","hoursGraph","e","getPeriod","currentTarget","textContent","text","DropdownButton","variant","DropdownItem","onClick","updatePeriod","bind","fluid","toLowerCase","ToggleButtonGroup","name","defaultValue","onChange","updateUnit","ToggleButton","value","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.16927c38.chunk.js","sourcesContent":["import React, { Component, createRef } from 'react';\nimport Chart from \"chart.js\";\nimport 'chartjs-plugin-zoom'\n\n//import classes from \"./LineChartComponent.module.css\";\n\nexport default class LineChartComponent extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.chartRef = createRef();\n\t}\n\n\trender() {\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<canvas id=\"myChart\" ref={this.chartRef} />\n\t\t\t</div>\n\t\t);\n\t}\n\n\tcomponentDidMount() {\n\n\t\tconst { labels, data, label, color } = this.props;\n\t\tconst myChartRef = this.chartRef.current.getContext(\"2d\");\n\t\tthis.myChart = new Chart(myChartRef,\n\t\t\t{\n\t\t\t\ttype: \"line\",\n\t\t\t\tdata: {\n\t\t\t\t\tlabels: labels,\n\t\t\t\t\tdatasets: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: label,\n\t\t\t\t\t\t\tdata: data,\n\t\t\t\t\t\t\tpointHoverBorderWidth: 5,\n\t\t\t\t\t\t\tpointRadius: 3.5,\n\t\t\t\t\t\t\tpointBorderWidth: 2,\n\t\t\t\t\t\t\tborderColor: color,\n\t\t\t\t\t\t\tpointBackgroundColor: '#FFFFFF',\n\t\t\t\t\t\t\tpointBorderColor: color,\n\t\t\t\t\t\t\tpointHoverBackgroundColor: color,\n\t\t\t\t\t\t\tpointHoverBorderColor: color,\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t},\n\n\t\t\t\toptions: {\n\t\t\t\t\tresponsive: true,\n\t\t\t\t\tmaintainAspectRatio: false,\n\t\t\t\t\taspectRatio: 1,\n\t\t\t\t\telements: {\n\t\t\t\t\t\tline: {\n\t\t\t\t\t\t\ttension: 0\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tlegend: {\n\t\t\t\t\t\tdisplay: false\n\t\t\t\t\t},\n\t\t\t\t\tscales: {\n\t\t\t\t\t\txAxes: [{\n\t\t\t\t\t\t\ttype: 'time'\n\t\t\t\t\t\t}]\n\t\t\t\t\t},\n\t\t\t\t\tpan: {\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tmode: 'x'\n\t\t\t\t\t},\n\t\t\t\t\tzoom: {\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tmode: 'x'\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tcomponentDidUpdate() {\n\t\tconst { labels, data, label, color } = this.props;\n\n\t\tconst myChartRef = this.chartRef.current.getContext(\"2d\");\n\t\tconst { height: graphHeight } = myChartRef.canvas;\n\n\t\t// Update chart's data\n\t\tthis.myChart.data.labels = labels;\n\t\tthis.myChart.data.datasets[0].data = data;\n\t\tthis.myChart.data.datasets[0].label = label;\n\n\t\t// Generate Color of the graph (gradient)\n\t\tlet gradientLine = myChartRef.createLinearGradient(0, 0, 0, graphHeight);\n\t\tconst rgb = [color.substring(1, 3), color.substring(3, 5), color.substring(5, 7)];\n\t\tconst color1 = `rgba(${rgb.map(c => (parseInt(c, 16))).join()}, 0.25)`;\n\t\tconst color2 = `rgba(${rgb.map(c => (parseInt(c, 16))).join()}, 0.0)`;\n\t\tgradientLine.addColorStop(0, color1);\n\t\tgradientLine.addColorStop(1, color2);\n\n\t\tthis.myChart.data.datasets[0].backgroundColor = gradientLine;\n\n\t\t// Reset view and update the graph\n\t\tthis.myChart.resetZoom()\n\t\tthis.myChart.update();\n\t}\n}","import React, { Component } from 'react';\nimport { blue2 } from \"../colors\";\nimport LineChartComponent from '../components/Charts/LineChartComponent';\n\nexport default class ChartContainer extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"\",\n      chartData: [],\n      chartLabels: [],\n      label: \"\",\n      Component: LineChartComponent\n    }\n  }\n\n  fetchData(url, chartLabelsName, chartDataName) {\n    fetch(url).then(res => res.json()).then(data => {\n      const parsedData = JSON.parse(data);\n      const chartLabels = parsedData[chartLabelsName]\n      const chartData = parsedData[chartDataName]\n      this.setState({ chartLabels: chartLabels, chartData: chartData });\n    });\n  }\n\n  componentDidMount() {\n    const { title, label, component } = this.props;\n    this.setState({ title: title, label: label, Component: component });\n  }\n\n  render() {\n    const { title, chartData, chartLabels, label, Component } = this.state;\n    return (\n      <Component data={chartData} labels={chartLabels} label={label} color={blue2} />\n    );\n  }\n\n}","\n\n\nexport const blue0 = \"#7ECFFA\";\nexport const blue1 = \"#52BFFB\";\nexport const blue2 = \"#28B1FA\";\nexport const blue3 = \"#0AA4F6\";\nexport const blue4 = \"#028AD3\";\n\n\nexport const yellow0 = \"#FFDB79\";\nexport const yellow1 = \"#FFCE49\";\nexport const yellow2 = \"#FFC21D\";\nexport const yellow3 = \"#FFBA00\";\nexport const yellow4 = \"#FFBA00\";\n\n\nexport const red0 = \"#FF9779\";\nexport const red1 = \"#FF7249\";\nexport const red2 = \"#FF501D\";\nexport const red3 = \"#FF3900\";\nexport const red4 = \"#FF3900\";\n\n\n","import React, { Component, createRef } from 'react';\n\nimport { Container, Row, Col, Card } from 'react-bootstrap';\nimport { MusicNoteList, Clock, ClockHistory } from 'react-bootstrap-icons';\n\nimport { blue2, yellow2, red2 } from \"../../colors\";\n\nexport default class RecapComponent extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { nbSongs, nbMinutes, avgMinutes } = this.props;\n        return (\n            <Row mb={4}>\n                <Col>\n                    <Card className=\"gradient-1 shadow-sm rounded-lg\">\n                        <Card.Body>\n                            <center>\n                                <b> Total Tracks </b>\n                                <h4 className=\"font-weight-bold\"> {nbSongs} </h4>\n                            </center>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col>\n                    <Card className=\"gradient-2 shadow-sm rounded-lg\">\n                        <Card.Body>\n                            <center>\n                                <b> Total Minutes </b>\n                                <h4 className=\"font-weight-bold\"> {nbMinutes} </h4>\n                            </center>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col>\n                    <Card className=\"gradient-3 shadow-sm rounded-lg\">\n                        <Card.Body>\n                            <center>\n                                <b> Minutes Average </b>\n                                <h4 className=\"font-weight-bold\"> {avgMinutes} </h4>\n                            </center>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        );\n    }\n}","import React, { Component } from 'react';\nimport RecapComponent from '../components/Recap/RecapComponent'\n\nexport default class RecapContainer extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      nbSongs: 0,\n      nbMinutes: 0,\n      avgMinutes: 0\n    }\n  }\n\n  fetchData(period) {\n    fetch(`/get/tracks-listened?dayOffset=${period}`).then(res => res.json()).then(data => {\n      this.setState({ nbSongs: data.tracks_listened })\n    });\n\n    fetch(`/get/min-listened?dayOffset=${period}`).then(res => res.json()).then(data => {\n      this.setState({ nbMinutes: data.min_listened })\n    });\n\n    fetch(`/get/avg-min-listened?dayOffset=${period}`).then(res => res.json()).then(data => {\n      this.setState({ avgMinutes: data.avg_min_listened })\n    });\n  }\n\n  componentDidMount() {\n    const { period } = this.props;\n    this.fetchData(period);\n  }\n\n  render() {\n    const { nbSongs, nbMinutes, avgMinutes } = this.state;\n    return (\n      <RecapComponent nbSongs={nbSongs} nbMinutes={nbMinutes} avgMinutes={avgMinutes} />\n\n    );\n  }\n\n}","import React, { Component, createRef } from 'react';\nimport Chart from \"chart.js\";\nimport 'chartjs-plugin-zoom'\n\nexport default class PolarAreaChartComponent extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.chartRef = createRef();\n\t}\n\n\trender() {\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<canvas id=\"myChart\" ref={this.chartRef} />\n\t\t\t</div>\n\t\t);\n\t}\n\n\tcomponentDidMount() {\n\n\t\tconst { labels, data, label, color } = this.props;\n\t\tconst myChartRef = this.chartRef.current.getContext(\"2d\");\n\t\tthis.myChart = new Chart(myChartRef,\n\t\t\t{\n\t\t\t\ttype: \"polarArea\",\n\t\t\t\tdata: {\n\t\t\t\t\tlabels: labels,\n\t\t\t\t\tdatasets: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: label,\n\t\t\t\t\t\t\tdata: data,\n\t\t\t\t\t\t\tborderColor: color,\n\t\t\t\t\t\t\tborderWidth: 1,\n\t\t\t\t\t\t\thoverBorderColor: color,\n\t\t\t\t\t\t\thoverBorderWidth: 2\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdata: [],\n\t\t\t\t\t\t\tborderColor: 'rgba(200, 200, 200, 0.05)',\n\t\t\t\t\t\t\tborderWidth: 1,\n\t\t\t\t\t\t\thoverBorderColor: 'rgba(200, 200, 200, 0.05)',\n\t\t\t\t\t\t\thoverBorderWidth: 1,\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t},\n\n\t\t\t\toptions: {\n\t\t\t\t\tresponsive: true,\n\t\t\t\t\tmaintainAspectRatio: false,\n\t\t\t\t\taspectRatio: 1,\n\t\t\t\t\tlegend: {\n\t\t\t\t\t\tdisplay: false\n\t\t\t\t\t},\n\t\t\t\t\ttooltips: {\n\t\t\t\t\t\tenabled: false,\n\t\t\t\t\t},\n\t\t\t\t\thover: {\n\t\t\t\t\t\tanimationDuration: 0\n\t\t\t\t\t},\n\t\t\t\t\tscale: {\n\t\t\t\t\t\tgridLines: {\n\t\t\t\t\t\t\tdisplay: false\n\t\t\t\t\t\t},\n\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\tmax: 1.3,\n\t\t\t\t\t\t\tdisplay: false\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tanimation: {\n\t\t\t\t\t\tduration: 1,\n\t\t\t\t\t\tonComplete: function () {\n\t\t\t\t\t\t\tvar chartInstance = this.chart;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmyChartRef.font = \"15px Arial\";\n\t\t\t\t\t\t\tmyChartRef.textAlign = 'right';\n\t\t\t\t\t\t\tmyChartRef.textBaseline = 'bottom';\n\t\t\t\t\t\t\tmyChartRef.fillStyle = \"#fff\";\n\n\t\t\t\t\t\t\t// Find the maximum radius of the polar chart\n\t\t\t\t\t\t\tvar maxRadius = 0;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar meta = chartInstance.controller.getDatasetMeta(0);\n\t\t\t\t\t\t\tmeta.data.forEach(function (bar) {\n\t\t\t\t\t\t\t\tif (parseFloat(bar._model.outerRadius) > maxRadius) {\n\t\t\t\t\t\t\t\t\tmaxRadius = parseFloat(bar._model.outerRadius);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// Display labels all around the chart\n\t\t\t\t\t\t\tvar meta = chartInstance.controller.getDatasetMeta(0);\n\t\t\t\t\t\t\tmeta.data.forEach(function (bar) {\n\t\t\t\t\t\t\t\tvar myangl = ((bar._model.startAngle) + (bar._model.endAngle)) / 2;\n\t\t\t\t\t\t\t\tvar xpoint = (maxRadius + 15) * (Math.cos(myangl)) + (bar._model.x);\n\t\t\t\t\t\t\t\tvar ypoint = (maxRadius + 15) * (Math.sin(myangl)) + (bar._model.y) + 10;\n\t\t\t\t\t\t\t\tmyChartRef.fillText(bar._model.label, xpoint, ypoint);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tcomponentDidUpdate() {\n\t\tconst { labels, data, label, color } = this.props;\n\n\t\tconst myChartRef = this.chartRef.current.getContext(\"2d\");\n\t\tconst { height: graphHeight, width: graphWidth } = myChartRef.canvas;\n\n\t\t// Update chart's data\n\t\tthis.myChart.data.labels = labels;\n\t\tthis.myChart.data.datasets[0].data = data;\n\t\tthis.myChart.data.datasets[0].label = label;\n\n\t\t// Generate Color of the graph (gradient)\n\t\tlet gradientRadial = myChartRef.createRadialGradient(graphWidth / 2, graphHeight / 2, 0, graphWidth / 2, graphHeight / 2, graphWidth / 4);\n\t\tconst rgb = [color.substring(1, 3), color.substring(3, 5), color.substring(5, 7)];\n\t\tconst color1 = `rgba(${rgb.map(c => (parseInt(c, 16))).join()}, 0.75)`;\n\t\tconst color2 = `rgba(${rgb.map(c => (parseInt(c, 16))).join()}, 0.0)`;\n\t\tgradientRadial.addColorStop(0, color1);\n\t\tgradientRadial.addColorStop(1, color2);\n\n\t\tthis.myChart.data.datasets[0].backgroundColor = gradientRadial\n\t\tthis.myChart.data.datasets[0].hoverBackgroundColor = gradientRadial\n\t\t\n\t\t// Background data\n\t\tvar background_data = new Array(data.length).fill(1);\n\t\tthis.myChart.data.datasets[1].data = background_data;\n\n\t\t// Update the graph\n\t\tthis.myChart.update();\n\t}\n}","import React, { Component, createRef } from 'react';\nimport Chart from \"chart.js\";\nimport 'chartjs-plugin-zoom'\n\nexport default class HorizontalBarChartComponent extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.chartRef = createRef();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<canvas id=\"myChart\" ref={this.chartRef} />\n\t\t\t</div>\n\t\t);\n\t}\n\n\tcomponentDidMount() {\n\n\t\tconst { labels, data, label, color } = this.props;\n\t\tconst myChartRef = this.chartRef.current.getContext(\"2d\");\n\t\tthis.myChart = new Chart(myChartRef,\n\t\t\t{\n\t\t\t\ttype: \"horizontalBar\",\n\t\t\t\tdata: {\n\t\t\t\t\tlabels: labels,\n\t\t\t\t\tdatasets: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: label,\n\t\t\t\t\t\t\tdata: data,\n\t\t\t\t\t\t\tborderWidth: 1.5,\n\t\t\t\t\t\t\thoverBorderWidth: 2.75,\n\t\t\t\t\t\t\tborderColor: color,\n\t\t\t\t\t\t\thoverBorderColor: color,\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t},\n\n\t\t\t\toptions: {\n\t\t\t\t\tresponsive: true,\n\t\t\t\t\tmaintainAspectRatio: false,\n\t\t\t\t\taspectRatio: 1,\n\t\t\t\t\tlegend: {\n\t\t\t\t\t\tdisplay: false\n\t\t\t\t\t},\n\t\t\t\t\tpan: {\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tmode: 'x'\n\t\t\t\t\t},\n\t\t\t\t\tzoom: {\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tmode: 'x'\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tcomponentDidUpdate() {\n\t\tconst { data, labels, label, color } = this.props;\n\n\t\tconst myChartRef = this.chartRef.current.getContext(\"2d\");\n\t\tconst { height: graphHeight } = myChartRef.canvas;\n\n\t\t// Update chart's data\n\t\tthis.myChart.data.labels = labels;\n\t\tthis.myChart.data.datasets[0].data = data;\n\t\tthis.myChart.data.datasets[0].label = label;\n\n\t\t// Generate Color of the graph (gradient)\n\t\tlet gradientLine = myChartRef.createLinearGradient(0, 0, 0, graphHeight);\n\t\tconst rgb = [color.substring(1, 3), color.substring(3, 5), color.substring(5, 7)];\n\t\tconst color1 = `rgba(${rgb.map(c => (parseInt(c, 16))).join()}, 0.75)`;\n\t\tconst color2 = `rgba(${rgb.map(c => (parseInt(c, 16))).join()}, 0.50)`;\n\t\tgradientLine.addColorStop(0, color1);\n\t\tgradientLine.addColorStop(1, color2);\n\t\t\n\t\tthis.myChart.data.datasets[0].backgroundColor = gradientLine;\n\t\t\n\t\t// Reset view and update the graph\n\t\tthis.myChart.resetZoom()\n\t\tthis.myChart.update();\n\t}\n}","import React, { Component, createRef } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\n\nexport default class ListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { listData, listLabels, col1Label, col2Label } = this.props;\n        console.log(listData)\n        return (\n            <Container>\n                <Row mb={4}>\n                    <Col xs={8}><b>{col1Label}</b></Col>\n                    <Col xs={4}><b class=\"float-right\">{col2Label}</b></Col>\n                </Row>\n                {listLabels.map((item, i) => (\n                    <Row key={i} mb={4}>\n                        <Col xs={8}><b>{i + 1}. {item}</b></Col>\n                        <Col xs={4}><div class=\"float-right\">{listData[i]}</div></Col>\n                    </Row>\n                ))}\n            </Container>\n        );\n    }\n\n}","import React, { Component } from 'react';\nimport ListComponent from '../components/List/ListComponent';\n\nexport default class ListContainer extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      listData: [],\n      listLabels: [],\n      col1Label: \"\",\n      col2Label: \"\"\n    }\n  }\n\n  fetchData(url, chartLabelsName, chartDataName) {\n    fetch(url).then(res => res.json()).then(data => {\n      const parsedData = JSON.parse(data);\n      const listLabels = parsedData[chartLabelsName]\n      const listData = parsedData[chartDataName]\n      this.setState({ listLabels: listLabels, listData: listData });\n    });\n  }\n\n  componentDidMount() {\n    const { col1Label, col2Label } = this.props;\n    this.setState({ col1Label: col1Label, col2Label: col2Label });\n  }\n\n  render() {\n    const { listData, listLabels, col1Label, col2Label } = this.state;\n    return (\n      <ListComponent listData={listData} listLabels={listLabels} col1Label={col1Label} col2Label={col2Label} />\n    );\n  }\n\n}","import React, { Component, createRef } from 'react';\nimport Chart from \"chart.js\";\nimport 'chartjs-plugin-zoom'\n\nexport default class BarChartComponent extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.chartRef = createRef();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<canvas id=\"myChart\" ref={this.chartRef} />\n\t\t\t</div>\n\t\t);\n\t}\n\n\tcomponentDidMount() {\n\n\t\tconst { labels, data, label, color } = this.props;\n\t\tconst myChartRef = this.chartRef.current.getContext(\"2d\");\n\t\tthis.myChart = new Chart(myChartRef,\n\t\t\t{\n\t\t\t\ttype: \"bar\",\n\t\t\t\tdata: {\n\t\t\t\t\tlabels: labels,\n\t\t\t\t\tdatasets: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: label,\n\t\t\t\t\t\t\tdata: data,\n\t\t\t\t\t\t\tborderWidth: 1.5,\n\t\t\t\t\t\t\tborderColor: color,\n\t\t\t\t\t\t\thoverBorderColor: color,\n\t\t\t\t\t\t\thoverBorderWidth: 2.75\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t},\n\n\t\t\t\toptions: {\n\t\t\t\t\tresponsive: true,\n\t\t\t\t\tmaintainAspectRatio: false,\n\t\t\t\t\taspectRatio: 1,\n\t\t\t\t\tlegend: {\n\t\t\t\t\t\tdisplay: false\n\t\t\t\t\t},\n\t\t\t\t\tscales: {\n\t\t\t\t\t\txAxes: [{\n\t\t\t\t\t\t\ttype: 'time',\n\t\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\t\tfontColor: \"#ffffff\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tgridLines: {\n\t\t\t\t\t\t\t\tcolor: 'rgba(200, 200, 200, 0.05)'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}],\n\t\t\t\t\t\tyAxes: [{\n\t\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\t\tfontColor: \"#ffffff\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tgridLines: {\n\t\t\t\t\t\t\t\tcolor: 'rgba(200, 200, 200, 0.05)'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}]\n\n\t\t\t\t\t},\n\t\t\t\t\tticks: {\n\t\t\t\t\t\tdisplay: false,\n\t\t\t\t\t\tfontColor: \"#ffffff\"\n\t\t\t\t\t},\n\t\t\t\t\tpan: {\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tmode: 'x'\n\t\t\t\t\t},\n\t\t\t\t\tzoom: {\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tmode: 'x'\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tcomponentDidUpdate() {\n\t\tconst { data, labels, label, color } = this.props;\n\n\t\tconst myChartRef = this.chartRef.current.getContext(\"2d\");\n\t\tconst { height: graphHeight } = myChartRef.canvas;\n\n\t\t// Update chart's data\n\t\tthis.myChart.data.datasets[0].data = data;\n\t\tthis.myChart.data.labels = labels;\n\t\tthis.myChart.data.datasets[0].label = label;\n\n\t\t// Generate Color of the graph (gradient)\n\t\tlet gradientLine = myChartRef.createLinearGradient(0, 0, 0, graphHeight);\n\t\tconst rgb = [color.substring(1, 3), color.substring(3, 5), color.substring(5, 7)];\n\t\tconst color1 = `rgba(${rgb.map(c => (parseInt(c, 16))).join()}, 0.5)`;\n\t\tconst color2 = `rgba(${rgb.map(c => (parseInt(c, 16)) - 50).join()}, 0)`;\n\t\tgradientLine.addColorStop(0, color1);\n\t\tgradientLine.addColorStop(1, color2);\n\n\t\tthis.myChart.data.datasets[0].backgroundColor = gradientLine;\n\t\t\n\t\t// Reset view and update the graph\n\t\tthis.myChart.resetZoom()\n\t\tthis.myChart.update();\n\t}\n}","import React, { Component } from 'react';\n\nimport ChartContainer from '../../containers/ChartContainer';\nimport RecapContainer from '../../containers/RecapContainer';\nimport { Container, Row, Col, Card } from 'react-bootstrap';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\nimport DropdownItem from 'react-bootstrap/DropdownItem';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport LineChartComponent from '../../components/Charts/LineChartComponent';\nimport HorizontalBarChartComponent from '../../components/Charts/HorizontalBarChartComponent';\nimport PolarAreaChartComponent from '../../components/Charts/PolarAreaChartComponent';\nimport ListContainer from '../../containers/ListContainer';\nimport BarChartComponent from '../../components/Charts/BarChartComponent';\n\nexport default class Dashboard extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tperiodText: \"Last 30 days\",\n\t\t\tperiod: 30,\n\t\t\tunit: \"min\",\n\t\t\tselectedArtist: \"None\",\n\t\t\tartistsList: []\n\t\t};\n\t\tthis.recapContainerElement = React.createRef();\n\t\tthis.dailyListeningGraph = React.createRef();\n\t\tthis.topArtistList = React.createRef();\n\t\tthis.artistListeningGraph = React.createRef();\n\t\tthis.hoursGraph = React.createRef();\n\t}\n\n\tupdatePeriod(e) {\n\t\tconst period = this.getPeriod(e.currentTarget.textContent);\n\t\tthis.setState({ periodText: e.currentTarget.textContent, period: period });\n\n\t\tconst { unit, selectedArtist } = this.state;\n\n\t\t// Update graphs with the new period\n\t\tthis.recapContainerElement.current.fetchData(period);\n\t\tthis.dailyListeningGraph.current.fetchData(`/get/daily-listened-${unit}?dayOffset=${period}`, \"index\", \"data\");\n\t\tthis.topArtistList.current.fetchData(`/get/top-artists?dayOffset=${period}&count=10`, \"index\", \"data\");\n\t\tthis.hoursGraph.current.fetchData(`/get/day-hours?dayOffset=${period}`, \"index\", \"data\");\n\t\t//this.artistListeningGraph.current.fetchData(`/get/artist-${unit}-listened?dayOffset=${period}&artist=${selectedArtist}`, \"index\", \"data\");\n\t}\n\n\tupdateUnit(unit) {\n\t\tthis.setState({ unit: unit });\n\t\tconst { period, selectedArtist } = this.state\n\n\t\t// Update graphs with the new unit\n\t\tthis.dailyListeningGraph.current.fetchData(`/get/daily-listened-${unit}?dayOffset=${period}`, \"index\", \"data\");\n\t\t//this.artistListeningGraph.current.fetchData(`/get/artist-${unit}-listened?dayOffset=${period}&artist=${selectedArtist}`, \"index\", \"data\");\n\t}\n\n\tgetPeriod(text) {\n\t\tswitch (text) {\n\t\t\tcase \"Last 30 days\":\n\t\t\t\treturn 30\n\t\t\t\tbreak;\n\n\t\t\tcase \"Last 6 months\":\n\t\t\t\treturn 182\n\t\t\t\tbreak;\n\n\t\t\tcase \"Last 12 months\":\n\t\t\t\treturn 365\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn 0\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/*getArtistsList() {\n\t\tfetch(\"/get/artists?dayOffset=365\").then(res => res.json()).then(data => {\n\t\t\tthis.setState({ artistsList: data.artists, selectedArtist: data.artists[0] });\n\t\t});\n\t}*/\n\n\tcomponentDidMount() {\n\t\tconst { period, unit, selectedArtist } = this.state\n\t\t//this.getArtistsList()\n\n\t\t// Init graphs\n\t\tthis.recapContainerElement.current.fetchData(period);\n\t\tthis.dailyListeningGraph.current.fetchData(`/get/daily-listened-min?dayOffset=${period}`, \"index\", \"data\");\n\t\tthis.topArtistList.current.fetchData(`/get/top-artists?dayOffset=${period}&count=10`, \"index\", \"data\");\n\t\tthis.hoursGraph.current.fetchData(`/get/day-hours?dayOffset=${period}`, \"index\", \"data\");\n\t\t//this.artistListeningGraph.current.fetchData(`/get/artist-${unit}-listened?dayOffset=${period}&artist=${selectedArtist}`, \"index\", \"data\");\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Container>\n\t\t\t\t\t<Row mb={4}>\n\t\t\t\t\t\t<Col><h4 className=\"white-title\">Spotify Statistics</h4></Col>\n\t\t\t\t\t\t<Col xs={4}></Col>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t<DropdownButton variant=\"btn btn-custom\" className=\"btn-custom mb-3 float-right  shadow-sm\" title={this.state.periodText}>\n\t\t\t\t\t\t\t\t<DropdownItem className=\"btn btn-custom\"><div onClick={this.updatePeriod.bind(this)}>Last 30 days</div></DropdownItem>\n\t\t\t\t\t\t\t\t<DropdownItem className=\"btn btn-custom\"><div onClick={this.updatePeriod.bind(this)}>Last 6 months</div></DropdownItem>\n\t\t\t\t\t\t\t\t<DropdownItem className=\"btn btn-custom\"><div onClick={this.updatePeriod.bind(this)}>Last 12 months</div></DropdownItem>\n\t\t\t\t\t\t\t</DropdownButton>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t\t<RecapContainer ref={this.recapContainerElement} period={this.state.period} />\n\t\t\t\t\t<div class=\"mt-4\" />\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t<Card className=\"shadow-sm rounded-lg\">\n\t\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t<Container fluid className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t<Row className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t\t\t\t\t<b>How many {this.state.unit} did you listen in the {this.state.periodText.toLowerCase()}?</b>\n\t\t\t\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"float-right \">\n\t\t\t\t\t\t\t\t\t\t\t\t\tStatistics based on: &nbsp;\n\t\t\t\t\t\t\t\t\t\t\t\t\t<ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue=\"min\" onChange={this.updateUnit.bind(this)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ToggleButton value=\"tracks\" className=\"btn-custom border\">Tracks</ToggleButton>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ToggleButton value=\"min\" className=\"btn-custom border\">Minutes</ToggleButton>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</ToggleButtonGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t</Row>\n\n\t\t\t\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t\t\t\t<ChartContainer component={BarChartComponent} ref={this.dailyListeningGraph} label={this.state.unit} />\n\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t\t<div class=\"mt-4\" />\n\t\t\t\t\t<Row >\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t<Card className=\"shadow-sm h-100 rounded-lg\">\n\t\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t<Container fluid className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t\t\t\t\t<b>Top Artists over the {this.state.periodText.toLowerCase()}</b>\n\t\t\t\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t\t\t\t<ListContainer ref={this.topArtistList} col1Label=\"Artist\" col2Label=\"min. played\" />\n\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t<Card className=\"shadow-sm h-100 rounded-lg\">\n\t\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t<Container fluid className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t\t\t\t\t<b>Listening Hours</b>\n\t\t\t\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t\t\t\t<ChartContainer component={PolarAreaChartComponent} ref={this.hoursGraph} label={this.state.unit} />\n\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t\t<div class=\"mt-4\" />\n\t\t\t\t\t{/*<Row>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t<Card className=\"shadow rounded\">\n\t\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t<Container fluid className=\"mb-2\">\n\t\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t\t\t\t\t<b>Listening of {this.state.selectedArtist}</b>\n\t\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t\t\t<Typeahead\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(selected) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.setState({selectedArtist : selected})\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst {unit, period} = this.state;\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.artistListeningGraph.current.fetchData(`/get/artist-${unit}-listened?dayOffset=${period}&artist=${selected}`, \"index\", \"data\");\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\toptions={this.state.artistsList}\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Choose an artist...\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t\t\t\t<BarChartContainer ref={this.artistListeningGraph} label={this.state.unit} />\n\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row> */}\n\t\t\t\t</Container>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n\n\n\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Dashboard from \"./views/Dashboard/Dashboard\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Dashboard />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}